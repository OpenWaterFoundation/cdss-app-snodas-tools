StartLog(LogFile="~$create-snodas-swe-graphs.TSTool.log")
# This command file processes each basin's full historical record using (for example):
# ProcessedData/5_CalculateStatistics/SnowpackStatisticsByBasin/SnowpackStatisticsByBasin_LOCAL_ID.csv
# Each of the "ByBasin" files contains the full period of daily statistics for the basin,
# which is converted into time series and processed into graphical output products.
# The analysis steps are summarized as follows and are further described in comments below:
#
# Step 1 - General setup
# Step 2 - Read basin connectivity from Excel file.
# Step 3 - Loop through each basin and create SWE graph of overlapping daily SWE values for LOCAL_ID
# Step 4 - Loop through each basin and create SWE graph of overlapping daily SWE values for total upstream basin
#
# History:
# 2017-03-18 Steve Malers, Open Water Foundation, Initial version.
# 2017-03-26 Steve Malers, Open Water Foundation, v2, add 25% melt-out line.
# 2017-03-31 Steve Malers, Open Water Foundation, v3, add cumulative SWE volume gain graph.
# 2017-06-01 Steve Malers, Open Water Foundation, v4, add basin total graphs and CSV output
#     using TSTool 12.03.00 (new network feature)
#========================================================================================================================
# Step 1 - read the list of basins from the Excel file into a TSTool table
# - this provides core data for later steps
# - also create a node network that allows select of the upstream basins
#
ReadTableFromExcel(TableID="WaterSupplyBasins",InputFile="../../staticData/WatershedConnectivity/Watershed_Connectivity_v4.xlsx",Worksheet="Connectivity",ExcelColumnNames=FirstRowInRange,ColumnExcludeFilters="LOCAL_ID:",ExcelDoubleColumns="AREA_SQKM",ExcelTextColumns="LOCAL_ID,LOCAL_NAME,DOWNSTREAM_LOCAL_ID,TOTAL_ID,TOTAL_NAME,POLY_SOURC,GAGE_ID,UPSTREAM BASIN 1,UPSTREAM BASIN 2,UPSTREAM BASIN 3,UPSTREAM BASIN 4,UPSTREAM BASIN 5",RowCountProperty="WaterSupplyBasinCount")
CreateNetworkFromTable(NetworkID="WaterSupplyBasins",NetworkName="Colorado Water Supply Basins",DefaultDownstreamNodeID="OutOfState",TableID="WaterSupplyBasins",NodeIDColumn="LOCAL_ID",NodeNameColumn="LOCAL_NAME",DownstreamNodeIDColumn="DOWNSTREAM_LOCAL_ID")
#===============================================================================
# Step 2 - general setup
# - figure out the last year in the data, and allow override if specified as input to TSTool
# - set the CurrentWaterYearStartDate property that is the reference date for start of water year
#   (Water year starts Oct 1 and will be previous year if month is < October)
#   For example, water year 2017 starts Oct 1, 2016 and ends Sep 30, 2017
# - set the CurrentDayDate property for the output product, which is used to create day-specific outputs
#
# First try reading the current date from a properties file, to receieve hand-off from a calling Python script
ReadPropertiesFromFile(InputFile="create-snodas-swe-graphs-tstool-control.txt",FileFormat=NameTypeValue)
SetProperty(PropertyName="SnodasStartDate",PropertyType=DateTime,PropertyValue="2003-09-30")
If(Name="If_SetCurrentDayNotSet",PropertyIsNotDefinedOrIsEmpty="CurrentDayDate")
Message(Message="Property CurrentDayDate is not defined, defaulting to computer current day.")
SetProperty(PropertyName="CurrentDayDate",PropertyType=DateTime,PropertyValue="CurrentToDay")
EndIf(Name="If_SetCurrentDayNotSet")
#
# Set the property CurrentDateNum as a number to allow integer comparison of date
# - the 25% of maximum snowpack line is only draw if March 1 or later
FormatDateTimeProperty(PropertyName="CurrentDateNum",DateTimePropertyName="CurrentDayDate",Format="%Y%m%d",PropertyType=Integer)
#
# Next set the water year start, needed for resetting the annual traces.
FormatDateTimeProperty(PropertyName="CurrentDateYearAsString",DateTimePropertyName="CurrentDayDate",Format="%Y")
FormatDateTimeProperty(PropertyName="CurrentDateMonthAsString",DateTimePropertyName="CurrentDayDate",Format="%m")
SetProperty(PropertyName="CurrentDateMonth",PropertyType=Integer,PropertyValue="${CurrentDateMonthAsString}")
If(Name="If_WaterYearStartIsLastCalendarYear",Condition="${CurrentDateMonth} < 10")
# In months January-September, so water year start needs to shift to use previous year.
SetProperty(PropertyName="CurrentWaterYearStartDate",PropertyType=DateTime,PropertyValue="${CurrentDateYearAsString}-10-01")
SetProperty(PropertyName="CurrentWaterYearStartDate",PropertyType=DateTime,PropertyValue="${CurrentWaterYearStartDate}",Subtract="1Year")
EndIf(Name="If_WaterYearStartIsLastCalendarYear")
If(Name="If_WaterYearStartIsThisCalendarYear",Condition="${CurrentDateMonth} >= 10")
# In months October-December, so water year start is OK using the current year
SetProperty(PropertyName="CurrentWaterYearStartDate",PropertyType=DateTime,PropertyValue="${CurrentDateYearAsString}-10-01")
EndIf(Name="If_WaterYearStartIsThisCalendarYear")
Message(Message="CurrentDayDate=${CurrentDayDate}, CurrentWaterYearStartDate=${CurrentWaterYearStartDate} will be used to generate output products.")
#
# Also set the CurrentWaterYearEndDate by doing some basic math
SetProperty(PropertyName="CurrentWaterYearEndDate",PropertyType=DateTime,PropertyValue="${CurrentWaterYearStartDate}")
SetProperty(PropertyName="CurrentWaterYearEndDate",PropertyType=DateTime,PropertyValue="${CurrentWaterYearEndDate}",Add="1Year")
SetProperty(PropertyName="CurrentWaterYearEndDate",PropertyType=DateTime,PropertyValue="${CurrentWaterYearEndDate}",Subtract="1Day")
FormatDateTimeProperty(PropertyName="CurrentWaterYear",DateTimePropertyName="CurrentWaterYearEndDate",Format="%Y",PropertyType=Integer)
# Current time used for Updated_Timestamp column in total volume CSV output at end
SetProperty(PropertyName="Now",PropertyType=DateTime,PropertyValue="CurrentToMinute")
#
# Set the March 1 date of the current water year as threshold for computing the 25% of peak snowpack
# - only do the calculation after this date assuming that the value has relevance
FormatDateTimeProperty(PropertyName="CurrentWaterYearMarch1DateNum",DateTimePropertyName="CurrentWaterYearEndDate",Format="%Y0301",PropertyType=Integer)
#===============================================================================
#
# Step 3 - loop through each LOCAL_ID in the table and create SWE plots
# - free the time series first since only want time series for one basin to be considered
#
For(Name="For_Basin_LOCAL_ID",IteratorProperty="Basin_LOCAL_ID",TableID="WaterSupplyBasins",TableColumn="LOCAL_ID",TablePropertyMap="LOCAL_NAME:LOCAL_NAME,TOTAL_ID:TOTAL_ID,TOTAL_NAME:TOTAL_NAME")
SetProperty(PropertyName="BasinID",PropertyType=String,PropertyValue="${Basin_LOCAL_ID}")
SetProperty(PropertyName="BasinName",PropertyType=String,PropertyValue="${LOCAL_NAME}")
Message(Message="Processing Basin_LOCAL_ID=${Basin_LOCAL_ID} BasinID=${BasinID}")
# Use the following if to run one basin, useful during development and troubleshooting.
# If(Name="TestInclude",Condition="${Basin_LOCAL_ID} == CDMC2",CompareAsStrings="True")
# If(Name="TestInclude",Condition="${Basin_LOCAL_ID} == CSNC2U",CompareAsStrings="True")
# If(Name="TestInclude",Condition="${Basin_LOCAL_ID} == 3175",CompareAsStrings="True")
# First read the statistics table for the basin
# - Each day in historical period is represented, through last day processed
# - Use LOCAL_ID as the unique identifier for basins
ReadTableFromDelimitedFile(TableID="${BasinID}_Statistics",InputFile="../../processedData/5_CalculateStatistics/SnowpackStatisticsByBasin/SnowpackStatisticsByBasin_${BasinID}.csv",HeaderLines="1",DateTimeColumns="Date_YYYYMMDD,Updated_Timestamp",DoubleColumns="SNODAS_SWE_Mean_in,SNODAS_SWE_Mean_mm,SNODAS_EffectiveArea_sqmi,SNODAS_SWE_Volume_acft,SNODAS_SWE_Volume_1WeekChange_acft,SNODAS_SnowCover_percent",TextColumns="LOCAL_ID")
#
# Convert the table to time series - process the SNODAS SWE first
TableToTimeSeries(TableID="${BasinID}_Statistics",DateTimeColumn="Date_YYYYMMDD",DateTimeFormat="%Y%m%d",LocationID="${BasinID}",ValueColumn="SNODAS_SWE_mean_in",DataSource="SNODAS",DataType="SWE",Interval=Day,Units="in",Alias="%L-SNODAS-SWE-Day")
# Convert the time series to annual traces in an ensemble with Oct 1 being the start of the water year
CreateEnsembleFromOneTimeSeries(TSID="${BasinID}-SNODAS-SWE-Day",EnsembleID="${BasinID}-SNODAS-SWE-Ensemble",EnsembleName="${BasinID}-SNODAS-SWE-Ensemble",Alias="${BasinID}-SNODAS-SWE-Day-%z",TraceLength=1Year,ReferenceDate="${CurrentWaterYearStartDate}",OutputYearType=Water,ShiftDataHow=ShiftToReference)
# Set properties that are used in graph template expansion
# - must make sure the property is an integer for FreeMarket template to work
SetPropertyFromEnsemble(EnsembleID="${BasinID}-SNODAS-SWE-Ensemble",PropertyName="FirstWaterYearString",PropertyValue="${tsensemble:FirstSequenceID}")
SetProperty(PropertyName="FirstWaterYear",PropertyType=Integer,PropertyValue="${FirstWaterYearString}")
SetPropertyFromEnsemble(EnsembleID="${BasinID}-SNODAS-SWE-Ensemble",PropertyName="LastWaterYearString",PropertyValue="${tsensemble:LastSequenceID}")
SetProperty(PropertyName="LastWaterYear",PropertyType=Integer,PropertyValue="${LastWaterYearString}")
ExpandTemplateFile(InputFile="snodas-localid-swe-graph-template.tsp",OutputFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE.tsp",ListInResults=False)
ProcessTSProduct(TSProductFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE.tsp",RunMode=GUIAndBatch,View=False,OutputFile="../../processedData/6_CreateTimeSeriesProducts/SnowpackGraphsByBasin/${BasinID}-SNODAS-SWE.png")
# Free the time series so each basin and graph type is processed independently without complex data management
Free(IfNotFound=Ignore)
#---- End SWE
#---- Start SWE Volume
#
# Process the SNODAS volume
TableToTimeSeries(TableID="${BasinID}_Statistics",DateTimeColumn="Date_YYYYMMDD",DateTimeFormat="%Y%m%d",LocationID="${BasinID}",ValueColumn="SNODAS_SWE_Volume_acft",DataSource="SNODAS",DataType="SWE-Volume",Interval=Day,Units="acft",Alias="%L-SNODAS-SWE-Volume-Day")
# Convert the time series to annual traces in an ensemble with Oct 1 being the start of the water year
CreateEnsembleFromOneTimeSeries(TSID="${BasinID}-SNODAS-SWE-Volume-Day",EnsembleID="${BasinID}-SNODAS-SWE-Volume-Ensemble",EnsembleName="${BasinID}-SNODAS-SWE-Volume-Ensemble",Alias="${BasinID}-SNODAS-SWE-Volume-Day-%z",TraceLength=1Year,ReferenceDate="${CurrentWaterYearStartDate}",OutputYearType=Water,ShiftDataHow=ShiftToReference)
#
# Check whether 25% melt-out should be computed (do after March 1 in water year)
# - some basins have zero snowpack all season so don't do annotation
SetProperty(PropertyName="SNODASSWEVolume25PercentComputed",PropertyType=String,PropertyValue="false")
If(Name="OnOrAfterMarch1",Condition="${CurrentDateNum} > ${CurrentWaterYearMarch1DateNum}")
SetProperty(PropertyName="SNODASSWEVolumeAlias",PropertyType=String,PropertyValue="${BasinID}-SNODAS-SWE-Volume-Day-${CurrentWaterYear}")
CalculateTimeSeriesStatistic(TSList=AllMatchingTSID,TSID="${SNODASSWEVolumeAlias}",Statistic="Max",AnalysisStart="${CurrentWaterYearStartDate}",AnalysisEnd="${CurrentWaterYearEndDate}",TimeSeriesProperty="CurrentWaterYearMaxSNODASSWEVolume")
SetPropertyFromTimeSeries(TSList=AllMatchingTSID,TSID="${SNODASSWEVolumeAlias}",PropertyName="CurrentWaterYearMaxSNODASSWEVolume",PropertyValue="${ts:CurrentWaterYearMaxSNODASSWEVolume}")
SetProperty(PropertyName="DoAnnotation",PropertyType=Boolean,PropertyValue="true")
If(Name="MaxCalculated",PropertyIsNotDefinedOrIsEmpty="CurrentWaterYearMaxSNODASSWEVolume")
SetProperty(PropertyName="DoAnnotation",PropertyType=Boolean,PropertyValue="false")
Message(Message="The maximum SNODAS SWE volume for basin ${BasinID} was not calculated.")
EndIf(Name="MaxCalculated")
If(Name="DoAnnotation",Condition="${DoAnnotation} == true")
Message(Message="The maximum SNODAS SWE volume for basin ${BasinID} was calculated as ${CurrentWaterYearMaxSNODASSWEVolume}")
SetProperty(PropertyName="CurrentWaterYearMaxSNODASSWEVolume_25Percent",PropertyType=Double,PropertyValue="${CurrentWaterYearMaxSNODASSWEVolume}",Multiply=.25)
FormatStringProperty(InputProperties="CurrentWaterYearMaxSNODASSWEVolume_25Percent,CurrentWaterYearMaxSNODASSWEVolume",Format="%.0f acft = 25%% of WY max SWE (%.0f acft)",OutputProperty="AnnotationLabel25PercentVolume")
SetProperty(PropertyName="SNODASSWEVolume25PercentComputed",PropertyType=String,PropertyValue="true")
EndIf(Name="DoAnnotation")
EndIf(Name="OnOrAfterMarch1")
#
# Now process the graph product
ExpandTemplateFile(InputFile="snodas-localid-swe-volume-graph-template.tsp",OutputFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE-Volume.tsp",ListInResults=False)
ProcessTSProduct(TSProductFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE-Volume.tsp",RunMode=GUIAndBatch,View=False,OutputFile="../../processedData/6_CreateTimeSeriesProducts/SnowpackGraphsByBasin/${BasinID}-SNODAS-SWE-Volume.png")
# Use the following for testing - time series will be in memory
# Exit()
#---- End SWE Volume
#---- Start SWE Volume cumulative
# Process the cumulative SNODAS volume gain, how much water actually was deposited on the basin
# -counts only daily positive increments to SWE volume
# -calculate from SWE volume and then free SWE volume before creating plot
Delta(TSList=AllMatchingTSID,TSID="${BasinID}-SNODAS-SWE-Volume-Day",ExpectedTrend=Increasing,Alias="${BasinID}-SNODAS-SWE-Volume-Cumulative-Day")
# Now free the SWE volume time series so each basin and graph type is processed independently without complex data management
Free(TSList=AllMatchingTSID,TSID="*SNODAS-SWE-Volume-Day*",IfNotFound=Ignore)
# Exit()
# Replace negatives with zero since only want to count positive moisture gains
ReplaceValue(TSList=AllMatchingTSID,TSID="${BasinID}-SNODAS-SWE-Volume-Cumulative-Day",MinValue=-9999999,MaxValue=0,NewValue=0)
Cumulate(TSList=AllMatchingTSID,TSID="${BasinID}-SNODAS-SWE-Volume-Cumulative-Day",Reset="10-01")
# Convert the time series to annual traces in an ensemble with Oct 1 being the start of the water year
CreateEnsembleFromOneTimeSeries(TSID="${BasinID}-SNODAS-SWE-Volume-Cumulative-Day",EnsembleID="${BasinID}-SNODAS-SWE-Volume-Cumulative-Ensemble",EnsembleName="${BasinID}-SNODAS-SWE-Volume-Cumulative-Ensemble",Alias="${BasinID}-SNODAS-SWE-Volume-Cumulative-Day-%z",TraceLength=1Year,ReferenceDate="${CurrentWaterYearStartDate}",OutputYearType=Water,ShiftDataHow=ShiftToReference)
NewTable(TableID="WaterYearCumulativeMaxTable",Columns="WaterYear,String;Max,double")
CalculateTimeSeriesStatistic(TSList=EnsembleID,EnsembleID="${BasinID}-SNODAS-SWE-Volume-Cumulative-Ensemble",Statistic="Max",TableID="WaterYearCumulativeMaxTable",TableTSIDColumn="WaterYear",TableTSIDFormat="%z",TableStatisticColumn="Max",StatisticValueProperty="SNODAS_SWE_Volume_Cumulative_Max_${BasinID}")
CopyTable(TableID="WaterYearCumulativeMaxTable",NewTableID="CumulativeMaxTable",IncludeColumns="Max")
ExpandTemplateFile(InputFile="snodas-localid-swe-volume-gain-cumulative-graph-template.tsp",OutputFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE-Volume-Gain-Cumulative.tsp",ListInResults=False)
ProcessTSProduct(TSProductFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE-Volume-Gain-Cumulative.tsp",RunMode=GUIAndBatch,View=False,OutputFile="../../processedData/6_CreateTimeSeriesProducts/SnowpackGraphsByBasin/${BasinID}-SNODAS-SWE-Volume-Gain-Cumulative.png")
FreeTable(TableID="WaterYearCumulativeMaxTable")
FreeTable(TableID="CumulativeMaxTable")
# Free the time series so each basin and graph type is processed independently without complex data management
Free(IfNotFound=Ignore)
#---- End SWE volume, cumulative
#---- Start SWE Volume 1-week change
#
# Process the 1-week (7-day) change in SNODAS volume
TableToTimeSeries(TableID="${BasinID}_Statistics",DateTimeColumn="Date_YYYYMMDD",DateTimeFormat="%Y%m%d",LocationID="${BasinID}",ValueColumn="SNODAS_SWE_Volume_1WeekChange_acft",DataSource="SNODAS",DataType="SWE-Volume-1WeekChange",Interval=Day,Units="acft",Alias="%L-SNODAS-SWE-Volume-1WeekChange-Day")
# Convert the time series to annual traces in an ensemble with Oct 1 being the start of the water year
CreateEnsembleFromOneTimeSeries(TSID="${BasinID}-SNODAS-SWE-Volume-1WeekChange-Day",EnsembleID="${BasinID}-SNODAS-SWE-Volume-1WeekChange-Ensemble",EnsembleName="${BasinID}-SNODAS-SWE-Volume-1WeekChange-Ensemble",Alias="${BasinID}-SNODAS-SWE-Volume-1WeekChange-Day-%z",TraceLength=1Year,ReferenceDate="${CurrentWaterYearStartDate}",OutputYearType=Water,ShiftDataHow=ShiftToReference)
ExpandTemplateFile(InputFile="snodas-localid-swe-volume-1weekchange-graph-template.tsp",OutputFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE-Volume-1WeekChange.tsp",ListInResults=False)
ProcessTSProduct(TSProductFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SWE-Volume-1WeekChange.tsp",RunMode=GUIAndBatch,View=False,OutputFile="../../processedData/6_CreateTimeSeriesProducts/SnowpackGraphsByBasin/${BasinID}-SNODAS-SWE-Volume-1WeekChange.png")
# Free the time series so each basin and graph type is processed independently without complex data management
Free(IfNotFound=Ignore)
#---- End SWE Volume 1-week change
#
# Process the snow cover percentage
TableToTimeSeries(TableID="${BasinID}_Statistics",DateTimeColumn="Date_YYYYMMDD",DateTimeFormat="%Y%m%d",LocationID="${BasinID}",ValueColumn="SNODAS_SnowCover_percent",DataSource="SNODAS",DataType="SnowCover",Interval=Day,Units="percent",Alias="%L-SNODAS-SnowCover-Day")
# Convert the time series to annual traces in an ensemble with Oct 1 being the start of the water year
CreateEnsembleFromOneTimeSeries(TSID="${BasinID}-SNODAS-SnowCover-Day",EnsembleID="${BasinID}-SNODAS-SnowCover-Ensemble",EnsembleName="${BasinID}-SNODAS-SnowCover-Ensemble",Alias="${BasinID}-SNODAS-SnowCover-Day-%z",TraceLength=1Year,ReferenceDate="${CurrentWaterYearStartDate}",OutputYearType=Water,ShiftDataHow=ShiftToReference)
ExpandTemplateFile(InputFile="snodas-localid-snowcover-graph-template.tsp",OutputFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SnowCover.tsp",ListInResults=False)
ProcessTSProduct(TSProductFile="SnowpackGraphsByBasin-tsp/${BasinID}-SNODAS-SnowCover.tsp",RunMode=GUIAndBatch,View=False,OutputFile="../../processedData/6_CreateTimeSeriesProducts/SnowpackGraphsByBasin/${BasinID}-SNODAS-SnowCover.png")
# Free the time series so each basin and graph type is processed independently without complex data management
Free(IfNotFound=Ignore)
#---- End snow cover percentage
#
# Also free the table, which over time can take up a lot of memory
FreeTable(TableID="${BasinID}_Statistics")
# EndIf(Name="TestInclude")
EndFor(Name="For_Basin_LOCAL_ID")
# One final free so as to not double-count time series for totals below...
Free(IfNotFound=Ignore)
#===============================================================================
#
# Step 4 - create SWE volume plots and SWE volume cumulative plots
# - this requires that all local basin SWE volume are in memory so reread since were freed above
# - one option would be to NOT free time series from above and be careful with TSIDs and names,
#   but for now free above and reread to keep the following processing separate
# - then use the SelectTimeSeries() command to select time series upstream of each local basin
#
# First read all the SWE volume time series
# - these time series will be shared for SWE Volume and SWE Volume cumulative plots
For(Name="For_Basin_LOCAL_ID_UpstreamTotal0",IteratorProperty="Basin_LOCAL_ID",TableID="WaterSupplyBasins",TableColumn="LOCAL_ID",TablePropertyMap="LOCAL_NAME:LOCAL_NAME,TOTAL_ID:TOTAL_ID,TOTAL_NAME:TOTAL_NAME")
SetProperty(PropertyName="BasinID",PropertyType=String,PropertyValue="${Basin_LOCAL_ID}")
SetProperty(PropertyName="BasinName",PropertyType=String,PropertyValue="${LOCAL_NAME}")
Message(Message="Reading Basin_LOCAL_ID=${Basin_LOCAL_ID} BasinID=${BasinID} SWE volume for total statistics")
ReadTableFromDelimitedFile(TableID="${BasinID}_Statistics",InputFile="../../processedData/5_CalculateStatistics/SnowpackStatisticsByBasin/SnowpackStatisticsByBasin_${BasinID}.csv",HeaderLines="1",DateTimeColumns="Date_YYYYMMDD,Updated_Timestamp",DoubleColumns="SNODAS_SWE_Mean_in,SNODAS_SWE_Mean_mm,SNODAS_EffectiveArea_sqmi,SNODAS_SWE_Volume_acft,SNODAS_SWE_Volume_1WeekChange_acft,SNODAS_SnowCover_percent",TextColumns="LOCAL_ID")
TableToTimeSeries(TableID="${BasinID}_Statistics",DateTimeColumn="Date_YYYYMMDD",DateTimeFormat="%Y%m%d",LocationID="${BasinID}",ValueColumn="SNODAS_SWE_Volume_acft",DataSource="SNODAS",DataType="SWE-Volume",Interval=Day,Units="acft",Alias="%L-SNODAS-SWE-Volume-Day")
# FreeTable(TableID="${BasinID}_Statistics")
EndFor(Name="For_Basin_LOCAL_ID_UpstreamTotal0")
#---- Start SWE Volume Total
#
# Create SWE Volume total upstream time series for each basin
# - Use SelectTimeSeries() to match all the *-SWE-Volume-Day time series and
#   also specify the network filter upstream inclusive of ${BasinID}
For(Name="For_Basin_LOCAL_ID_UpstreamTotal",IteratorProperty="Basin_LOCAL_ID",TableID="WaterSupplyBasins",TableColumn="LOCAL_ID",TablePropertyMap="LOCAL_NAME:LOCAL_NAME,TOTAL_ID:TOTAL_ID,TOTAL_NAME:TOTAL_NAME")
SetProperty(PropertyName="BasinID",PropertyType=String,PropertyValue="${Basin_LOCAL_ID}")
SetProperty(PropertyName="BasinName",PropertyType=String,PropertyValue="${LOCAL_NAME}")
Message(Message="Processing Basin_LOCAL_ID=${Basin_LOCAL_ID} BasinID=${BasinID} for upstream total SWE volume")
SelectTimeSeries(TSList=AllMatchingTSID,TSID="*-SNODAS-SWE-Volume-Day",DeselectAllFirst=True,NetworkID="WaterSupplyBasins",DownstreamNodeID="${BasinID}")
NewTimeSeries(Alias="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day",NewTSID="${BasinID}-UpstreamTotal.SNODAS.SWE-Volume.Day",Description="${BasinID} total volume for basin and upstream",SetStart="${SnodasStartDate}",SetEnd="${CurrentDayDate}",Units="ACFT",MissingValue=NaN)
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day",PropertyName="LOCAL_ID",PropertyType=String,PropertyValue="${BasinID}")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day",PropertyName="LOCAL_NAME",PropertyType=String,PropertyValue="${BasinName}")
Add(TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day",AddTSList=SelectedTS,HandleMissingHow="IgnoreMissing",IfTSListToAddIsEmpty=Warn)
# Convert the time series to annual traces in an ensemble with Oct 1 being the start of the water year
CreateEnsembleFromOneTimeSeries(TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day",EnsembleID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Ensemble",EnsembleName="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Ensemble",Alias="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day-%z",TraceLength=1Year,ReferenceDate="${CurrentWaterYearStartDate}",OutputYearType=Water,ShiftDataHow=ShiftToReference)
# Output the basin total CSV file for the specific basin
# - manipulate in tables to have similar columsn to the original input
TimeSeriesToTable(TSList=AllMatchingTSID,TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day",TableID="${BasinID}_SWE_Volume_UpstreamTotal",DateTimeColumn="Date",TableTSIDColumn="LOCAL_ID",TableTSIDFormat="${ts:LOCAL_ID}",ValueColumn="SNODAS_SWE_UpstreamTotal_Volume_acft",OutputPrecision=1,IfTableNotFound="Create")
FormatTableDateTime(TableID="${BasinID}_SWE_Volume_UpstreamTotal",InputColumn="Date",DateTimeFormat="%Y%m%d",OutputColumn="Date_YYYYMMDD",OutputType=Integer,InsertBeforeColumn="Date")
DeleteTableColumns(TableID="${BasinID}_SWE_Volume_UpstreamTotal",DeleteColumns="Date")
InsertTableColumn(TableID="${BasinID}_SWE_Volume_UpstreamTotal",InsertColumn="LOCAL_NAME",InsertBeforeColumn="SNODAS_SWE_UpstreamTotal_Volume_acft",ColumnType=String,InitialValue="${BasinName}")
InsertTableColumn(TableID="${BasinID}_SWE_Volume_UpstreamTotal",InsertColumn="Updated_Timestamp",ColumnType=DateTime,InitialValue="${Now}")
WriteTableToDelimitedFile(TableID="${BasinID}_SWE_Volume_UpstreamTotal",OutputFile="../../processedData/5_CalculateStatistics/SnowpackStatisticsByBasin/SnowpackStatisticsByBasin_UpstreamTotal_${BasinID}.csv",WriteHeaderComments=False)
FreeTable(TableID="${BasinID}_SWE_Volume_UpstreamTotal")
# Process the graph product
ExpandTemplateFile(InputFile="snodas-localid-upstreamtotal-swe-volume-graph-template.tsp",OutputFile="SnowpackGraphsByBasin-tsp/${BasinID}-UpstreamTotal-SNODAS-SWE-Volume.tsp",ListInResults=False)
ProcessTSProduct(TSProductFile="SnowpackGraphsByBasin-tsp/${BasinID}-UpstreamTotal-SNODAS-SWE-Volume.tsp",RunMode=GUIAndBatch,View=False,OutputFile="../../processedData/6_CreateTimeSeriesProducts/SnowpackGraphsByBasin/${BasinID}-UpstreamTotal-SNODAS-SWE-Volume.png")
# OK to free the ensemble time series but can leave as is too for troubleshooting
# Free(TSList=EnsembleID,EnsembleID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Ensemble",IfNotFound=Warn,FreeEnsembleIfEmpty=True)
EndFor(Name="For_Basin_LOCAL_ID_UpstreamTotal")
#
# Output the total volume "ByDate" CSV file containing today's values
CalculateTimeSeriesStatistic(TSList=AllMatchingTSID,TSID="*-UpstreamTotal-SNODAS-SWE-Volume-Day",Statistic="Last",TableID="UpstreamTotal-SWE-Volume-Day-ByDate",TableTSIDColumn="LOCAL_ID",TableTSIDFormat="${ts:LOCAL_ID}",TableStatisticColumn="SNODAS_SWE_UpstreamTotal_Volume_acft",TableStatisticDateTimeColumn="Date")
FormatTableDateTime(TableID="UpstreamTotal-SWE-Volume-Day-ByDate",InputColumn="Date",DateTimeFormat="%Y%m%d",OutputColumn="Date_YYYYMMDD",OutputType=Integer,InsertBeforeColumn="LOCAL_ID")
DeleteTableColumns(TableID="UpstreamTotal-SWE-Volume-Day-ByDate",DeleteColumns="Date")
InsertTableColumn(TableID="UpstreamTotal-SWE-Volume-Day-ByDate",InsertColumn="LOCAL_NAME",InsertBeforeColumn="SNODAS_SWE_UpstreamTotal_Volume_acft",ColumnType=String,InitialValue="${BasinName}")
InsertTableColumn(TableID="UpstreamTotal-SWE-Volume-Day-ByDate",InsertColumn="Updated_Timestamp",ColumnType=DateTime,InitialValue="${Now}")
WriteTableToDelimitedFile(TableID="UpstreamTotal-SWE-Volume-Day-ByDate",OutputFile="../../processedData/5_CalculateStatistics/SnowpackStatisticsByDate/SnowpackStatisticsByDate_UpstreamTotal_${CurrentDateNum}.csv",WriteHeaderComments=False)
WriteTableToDelimitedFile(TableID="UpstreamTotal-SWE-Volume-Day-ByDate",OutputFile="../../processedData/5_CalculateStatistics/SnowpackStatisticsByDate/SnowpackStatisticsByDate_UpstreamTotal_LatestDate.csv",WriteHeaderComments=False)
#---- End SWE Volume Total
#---- Start SWE Volume Total Cumulative
#
# Create SWE Volume total upstream cumulative time series for each basin
# - Use SelectTimeSeries() to match all the *-SWE-Volume-Day time series and
#   also specify the network filter upstream inclusive of ${BasinID}
For(Name="For_Basin_LOCAL_ID_UpstreamTotal_Cumulative",IteratorProperty="Basin_LOCAL_ID",TableID="WaterSupplyBasins",TableColumn="LOCAL_ID",TablePropertyMap="LOCAL_NAME:LOCAL_NAME,TOTAL_ID:TOTAL_ID,TOTAL_NAME:TOTAL_NAME")
SetProperty(PropertyName="BasinID",PropertyType=String,PropertyValue="${Basin_LOCAL_ID}")
SetProperty(PropertyName="BasinName",PropertyType=String,PropertyValue="${LOCAL_NAME}")
Message(Message="Processing Basin_LOCAL_ID=${Basin_LOCAL_ID} BasinID=${BasinID} for upstream total SWE volume")
# Previous basin total time series already exists so don't need to do any additions
# - cumulative counts only daily positive increments to SWE volume
# - temporary tables are used to store statistics so they can be used in annotations
Delta(TSList=AllMatchingTSID,TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Day",ExpectedTrend=Increasing,Alias="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Day")
# Replace negatives with zero since only want to count positive moisture gains
ReplaceValue(TSList=AllMatchingTSID,TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Day",MinValue=-9999999,MaxValue=0,NewValue=0)
Cumulate(TSList=AllMatchingTSID,TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Day",Reset="10-01")
# Convert the time series to annual traces in an ensemble with Oct 1 being the start of the water year
CreateEnsembleFromOneTimeSeries(TSID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Day",EnsembleID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Ensemble",EnsembleName="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Ensemble",Alias="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Day-%z",TraceLength=1Year,ReferenceDate="${CurrentWaterYearStartDate}",OutputYearType=Water,ShiftDataHow=ShiftToReference)
# Now process the graph product
NewTable(TableID="WaterYearCumulativeMaxTable",Columns="WaterYear,String;Max,double")
CalculateTimeSeriesStatistic(TSList=EnsembleID,EnsembleID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Cumulative-Ensemble",Statistic="Max",TableID="WaterYearCumulativeMaxTable",TableTSIDColumn="WaterYear",TableTSIDFormat="%z",TableStatisticColumn="Max",StatisticValueProperty="SNODAS_SWE_Volume_Cumulative_Max_${BasinID}")
CopyTable(TableID="WaterYearCumulativeMaxTable",NewTableID="CumulativeMaxTable",IncludeColumns="Max")
ExpandTemplateFile(InputFile="snodas-localid-upstreamtotal-swe-volume-gain-cumulative-graph-template.tsp",OutputFile="SnowpackGraphsByBasin-tsp/${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Gain-Cumulative.tsp",ListInResults=False)
ProcessTSProduct(TSProductFile="SnowpackGraphsByBasin-tsp/${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Gain-Cumulative.tsp",RunMode=GUIAndBatch,View=False,OutputFile="../../processedData/6_CreateTimeSeriesProducts/SnowpackGraphsByBasin/${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Gain-Cumulative.png")
# Free temporary tables
FreeTable(TableID="WaterYearCumulativeMaxTable")
FreeTable(TableID="CumulativeMaxTable")
# OK to free the ensemble time series but can leave as is too for troubleshooting
# Free(TSList=EnsembleID,EnsembleID="${BasinID}-UpstreamTotal-SNODAS-SWE-Volume-Ensemble",IfNotFound=Warn,FreeEnsembleIfEmpty=True)
#---- End SWE Volume Total Cumulative
EndFor(Name="For_Basin_LOCAL_ID_UpstreamTotal_Cumulative")
